User Documentation
==================


In order, for the user, to interact with fwlc, it offers a prompt.

There are a certain number of command possible.


General command
---------------

``:h`` or ``:help``:
   print the help message.

``:q`` or ``:quit``:
   exit the program.

``:license``:
   print the License.


Expression manipulation
-----------------------

In order to manipulate expressions, they can be attached to an identificator.

In the following explanation, ``<Id>`` denotes a correct identificator, and
``<Exp>`` a string representing a lambda expression.

The set of correct identificators is the infinite set of strings containing only
uppercase ASCII caracters.

On the other hand, lambda expressions are represented in a way that is readable
for the user and the machine. The choice of the author are:

- none of the parentheses are omitted except around a simple variable.
- the lambda operator is represented by the greek letter 'λ' but the user can
  use the character '/' to facilitate the input.

Here are some examples:

============ ======================= =========
Expression   Representation          Input
============ ======================= =========
Variable     :math:`x`                x
Application  :math:`(xy)`             (xy)
Application  :math:`((xy)z)`          ((xy)z)
Application  :math:`(x(yz))`          (x(yz))
Abstraction  :math:`(\lambda x.x)`    (/x.x)
============ ======================= =========
 

``<Id> = <Exp>``:
   assign ``<Exp>`` to ``<Id>``.

``<Id>``:
   print the attached expression if there is one, print a message stating that
   there is none otherwise.

``<Exp>``:
   print the expression if it is well formed, print a message stating
   that it is not otherwise.

``:NOBeval <Id>`` or ``:NOBeval <Exp>``:
   print all the steps of the β-evaluation either of the lambda expression
   attached to the ``<Id>`` or directly of ``<Exp>`` according to the normal
   order, that is the evaluation that begins by the leftmost expression.


``:AOBeval <Id>`` or ``:AOBeval <Exp>``:
   print all the steps of the β-evaluation either of the lambda expression
   attached to the ``<Id>`` or directly of ``<Exp>`` according to the
   applicative order, that is the evaluation that begins by the rightmost
   expression.


``:info <Id>`` or ``:info <Exp>``:
   print informations either about the expression attached to ``<Id>`` or
   directly about ``<Exp>``.



